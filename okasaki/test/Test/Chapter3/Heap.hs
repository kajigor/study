{-# LANGUAGE ScopedTypeVariables #-}

module Test.Chapter3.Heap where

import Test.Tasty.HUnit (Assertion, (@=?), assertBool)
import Chapter3.Heap 

fromList :: Ord a => (a -> LeftBiasedHeap a -> LeftBiasedHeap a) -> [a] -> LeftBiasedHeap a
fromList f xs = foldl (\h x -> f x h) empty xs 

testInsert :: Ord a => (a -> LeftBiasedHeap a -> LeftBiasedHeap a) -> [a] -> IO ()
testInsert insert xs = do 
  let heap = fromList insert xs 
  assertBool "isHeap" (isHeap heap)
  assertBool "isHeap" (isLeftist heap) 

unit_insert :: Assertion 
unit_insert = do
  let inputs = [ [1] 
               , [0,1,2,3]
               , [1,1,1,1,1,1,1,1,1]
               , [3,14,15,92,65,35,89,79,32,38,46,26,43]
               , [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
               , [250,632,211,649,921,455,130,850,908,345,936,733,541,62,472,748,609,960,41,440,6,845,771,421,967,165,770,425,504,232,797,623,920,477,846,548,308,303,642,332,17,990,615,731,716,965,394,411,863,81,381,701,124,646,547,82,312,127,713,791,390,383,859,656,420,798,602,711,354,362,446,761,855,911,249,641,762,132,134,751,763,536,46,85,508,21,949,982,489,216,84,452,202,375,740,543,137,357,353,25,267,363,806,384,77,891,535,551,483,878,873,333,854,768,678,395,150,182,747,720,274,710,887,549,110,637,42,13,705,262,644,231,39,374,466,995,184,498,934,938,61,87,851,594,179,984,307,20,538,456,780,114,112,978,388,193,30,324,98,125,386,980,527,571,129,399,841,479,407,517,932,279,834,433,942,4,487,663,935,730,485,945,268,868,520,164,813,510,952,993,38,831,598,418,95,673,7,940,894,573,986,341,412,493,518,557,297,579,727,370,607,499,708,799,210,659,167,468,271,874,480,385,8,807,188,203,680,823,645,43,614,206,625,916,554,685,621,566,291,256,257,283,502,197,907,670,141,441,190,54,582,300,476,339,902,31,389,266,416,469,758,360,968,350,224,913,885,122,927,89,691,729,9,450,796,244,552,668,391,28,58,461,626,757,742,737,838,436,264,282,272,35,983,923,219,664,519,434,281,657,352,208,578,149,988,222,108,525,107,16,991,372,259,745,215,445,427,832,207,393,292,56,380,330,488,849,196,767,230,800,172,97,575,703,57,836,91,700,529,426,919,255,217,790,886,759,392,53,987,309,145,429,138,739,414,68,121,532,168,240,318,555,115,890,683,40,605,930,715,918,853,248,511,785,181,492,696,227,404,79,865,471,709,325,349,957,606,588,611,337,749,321,514,879,844,776,319,556,243,954,738,163,70,772,155,522,11,702,628,818,810,241,928,833,119,639,285,1000,277,915,254,118,435,975,689,213,335,896,574,1,750,888,686,296,116,560,45,985,622,618,973,228,299,405,334,839,714,198,2,135,681,826,49,234,658,133,158,67,803,513,136,688,585,261,23,581,382,675,662,712,47,795,860,512,173,48,220,403,342,591,76,94,448,18,314,530,509,634,310,857,577,647,883,900,906,346,531,376,72,473,808,24,221,893,847,869,966,506,725,111,596,358,926,431,794,635,933,694,881,867,284,288,812,550,961,523,273,903,465,754,569,718,236,719,32,753,367,528,290,306,744,286,728,139,586,65,629,428,587,453,804,848,604,638,100,126,947,387,154,422,270,941,568,648,895,951,905,793,811,979,449,96,570,447,464,953,187,214,157,467,169,106,142,963,92,218,481,239,343,113,695,603,546,724,692,944,444,595,166,73,454,293,212,752,977,186,672,817,313,315,438,377,866,769,280,764,323,29,669,507,462,969,781,783,413,998,204,470,544,225,151,620,475,736,884,159,75,437,269,251,559,899,948,732,981,816,5,565,760,925,537,707,822,245,636,999,633,698,616,964,371,564,756,904,378,777,610,64,661,463,627,746,660,86,655,109,524,401,877,183,78,229,366,200,976,105,665,253,792,458,821,600,311,515,922,295,396,693,788,787,706,177,348,490,704,152,409,74,802,71,201,60,956,170,235,246,209,561,486,820,199,176,242,666,423,336,36,840,474,322,302,814,654,950,829,162,192,185,640,599,373,93,909,88,189,676,593,501,939,843,861,540,856,44,876,451,584,539,443,147,735,553,576,755,80,937,294,782,533,880,289,55,161,955,558,526,842,153,424,503,15,117,379,496,773,103,563,643,914,397,612,140,819,828,699,415,815,191,734,946,684,679,931,408,994,864,667,410,825,497,572,741,958,205,442,160,10,631,882,697,223,671,989,344,835,406,226,69,917,143,368,328,275,287,545,677,316,123,766,252,619,355,608,505,301,419,3,340,180,402,910,765,613,601,775,837,305,178,99,962,19,567,317,789,365,331,929,12,827,51,34,338,457,146,326,871,260,682,131,722,972,144,901,174,102,805,617,491,66,37,237,774,101,52,430,650,104,238,90,809,26,494,721,898,690,562,970,717,779,500,120,50,265,364,862,83,258,824,175,356,347,298,534,27,651,351,484,943,801,996,583,369,327,997,974,630,63,652,624,195,653,872,329,495,924,233,361,852,858,892,542,59,830,276,156,439,786,516,171,320,875,597,194,459,482,971,590,726,723,778,128,460,743,304,912,521,417,992,959,592,870,400,674,432,889,478,14,589,263,897,247,359,398,687,784,22,33,278,580,148]
               ] 
  mapM_ (testInsert insert) inputs  
  mapM_ (testInsert insert') inputs  
